import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as s,o as t}from"./app-myKONBUc.js";const r={};function o(p,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="docker-uses" tabindex="-1"><a class="header-anchor" href="#docker-uses"><span>Docker Uses</span></a></h1><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 新建并启动一个ubuntu:18.04的bash</span>
<span class="token comment"># -t :让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</span>
<span class="token comment"># -i :让容器的标准输入保持打开</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> ubuntu:18.04 /bin/bash

<span class="token comment"># 启动bash，并把本地目录/uer/dir 挂载到容器/opt/temp目录</span>
<span class="token comment"># --mount type=bind,source=/uer/dir,target=/opt/temp,readonly  :挂载可以指定读写权限，默认是可读可写</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">--mount</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/uer/dir,target<span class="token operator">=</span>/opt/temp  ubuntu:16.04 /bin/bash

<span class="token comment"># 可指定多个挂载</span>
$ <span class="token function">docker</span> run <span class="token parameter variable">-ti</span> <span class="token parameter variable">-v</span> /Users/temp:/opt/temp <span class="token punctuation">\\</span>
								 <span class="token parameter variable">-v</span> /Users/uname/.zsh_history:/root/.zsh_history <span class="token punctuation">\\</span>       		wswenyue/my_ubuntu_16_04 /bin/zsh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入一个已经运行中的容器</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># containerId: 容器id</span>
$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> containerId /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const l=a(r,[["render",o],["__file","docker.html.vue"]]),m=JSON.parse('{"path":"/note/docker.html","title":"Docker Uses","lang":"zh-CN","frontmatter":{"description":"Docker Uses 进入一个已经运行中的容器","head":[["meta",{"property":"og:url","content":"https://wswenyue.vip/note/docker.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Docker Uses"}],["meta",{"property":"og:description","content":"Docker Uses 进入一个已经运行中的容器"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T13:08:40.000Z"}],["meta",{"property":"article:author","content":"Mr.WenYue"}],["meta",{"property":"article:modified_time","content":"2024-03-31T13:08:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker Uses\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-31T13:08:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.WenYue\\",\\"url\\":\\"https://github.com/wswenyue/\\"}]}"]]},"headers":[],"git":{"createdTime":1711890520000,"updatedTime":1711890520000,"contributors":[{"name":"wswenyue","email":"wswenyue@163.com","commits":1}]},"readingTime":{"minutes":0.52,"words":155},"filePathRelative":"note/docker.md","localizedDate":"2024年3月31日","excerpt":"\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 新建并启动一个ubuntu:18.04的bash</span>\\n<span class=\\"token comment\\"># -t :让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</span>\\n<span class=\\"token comment\\"># -i :让容器的标准输入保持打开</span>\\n$ <span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">-t</span> <span class=\\"token parameter variable\\">-i</span> ubuntu:18.04 /bin/bash\\n\\n<span class=\\"token comment\\"># 启动bash，并把本地目录/uer/dir 挂载到容器/opt/temp目录</span>\\n<span class=\\"token comment\\"># --mount type=bind,source=/uer/dir,target=/opt/temp,readonly  :挂载可以指定读写权限，默认是可读可写</span>\\n$ <span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">-t</span> <span class=\\"token parameter variable\\">-i</span> <span class=\\"token parameter variable\\">--mount</span> <span class=\\"token assign-left variable\\">type</span><span class=\\"token operator\\">=</span>bind,source<span class=\\"token operator\\">=</span>/uer/dir,target<span class=\\"token operator\\">=</span>/opt/temp  ubuntu:16.04 /bin/bash\\n\\n<span class=\\"token comment\\"># 可指定多个挂载</span>\\n$ <span class=\\"token function\\">docker</span> run <span class=\\"token parameter variable\\">-ti</span> <span class=\\"token parameter variable\\">-v</span> /Users/temp:/opt/temp <span class=\\"token punctuation\\">\\\\</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t <span class=\\"token parameter variable\\">-v</span> /Users/uname/.zsh_history:/root/.zsh_history <span class=\\"token punctuation\\">\\\\</span>       \\t\\twswenyue/my_ubuntu_16_04 /bin/zsh\\n</code></pre></div>","autoDesc":true}');export{l as comp,m as data};
