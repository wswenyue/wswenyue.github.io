import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-BWFs2kdN.js";const t={},p=e(`<h1 id="gradle-相关" tabindex="-1"><a class="header-anchor" href="#gradle-相关"><span>gradle 相关</span></a></h1><h2 id="gradle-常用命令行" tabindex="-1"><a class="header-anchor" href="#gradle-常用命令行"><span>gradle 常用命令行</span></a></h2><blockquote><p>using doc see: https://docs.gradle.org/current/userguide/command_line_interface.html#example_excluding_tasks</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看项目依赖</span>
$ gradle <span class="token parameter variable">-q</span> bangjob:dependencies <span class="token operator">|</span><span class="token function">tee</span> ~/Desktop/dep.txt

<span class="token comment"># 列出task</span>
$ gradle <span class="token parameter variable">-q</span> tasks
<span class="token comment"># 列出所有task</span>
$ gradle <span class="token parameter variable">-q</span> tasks <span class="token parameter variable">--all</span>
<span class="token comment"># 假执行build Task，他的所有Task执行都会被跳过。即可以使用该命令列出build执行的所有task。 </span>
$ gradle build --dry-run

<span class="token comment"># 执行 dist task 排除test task</span>
$ gradle dist --exclude-task <span class="token builtin class-name">test</span>

<span class="token comment"># 不管 up-to-date checks，强制执行所有task</span>
$ gradle <span class="token builtin class-name">test</span> --rerun-tasks

<span class="token comment"># 执行build和强制刷新下载依赖</span>
$ gradle build --refresh-dependencies

<span class="token comment"># 列出所有的项目，子项目</span>
$ gradle projects

<span class="token comment"># 查看build Task的帮助，可以输出该Task的详细信息</span>
$ gradle <span class="token parameter variable">-q</span> <span class="token builtin class-name">help</span> <span class="token parameter variable">--task</span> build

<span class="token comment"># 打印对应项目所有的属性值</span>
$ gradle <span class="token parameter variable">-q</span> bangjob:properties

<span class="token comment"># 执行clean assembleDebug Task 并设置代理</span>
$ gradle clean assembleDebug <span class="token parameter variable">-Dhttp.proxyHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token parameter variable">-Dhttp.proxyPort</span><span class="token operator">=</span><span class="token number">1087</span> <span class="token parameter variable">-Dhttps.proxyHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token parameter variable">-Dhttps.proxyPort</span><span class="token operator">=</span><span class="token number">1087</span> <span class="token parameter variable">--info</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="执行脚本" tabindex="-1"><a class="header-anchor" href="#执行脚本"><span>执行脚本</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//函数如不需要返回值，把return相关去掉就行。另外如不设置standardOutput，默认就是控制台，屏幕输出，这样可以实时输出。</span>
def sayHello <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-&gt;</span>
    def ret1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    exec <span class="token punctuation">{</span>
        commandLine <span class="token string">&quot;echo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span>
        standardOutput <span class="token operator">=</span> ret1

    <span class="token punctuation">}</span>

    def ret2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    exec <span class="token punctuation">{</span>
        commandLine <span class="token char">&#39;echo&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;ABC&quot;</span>
        standardOutput <span class="token operator">=</span> ret2
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;-&#39;</span> <span class="token operator">+</span> ret1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

def <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;echo Hi,body&quot;</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

task printSay <span class="token punctuation">{</span>
    group <span class="token char">&#39;demo&#39;</span>
    doLast <span class="token punctuation">{</span>
        println <span class="token string">&quot;------&gt;&quot;</span> <span class="token operator">+</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        println <span class="token string">&quot;------&gt;&quot;</span> <span class="token operator">+</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),l=[p];function o(c,i){return a(),s("div",null,l)}const u=n(t,[["render",o],["__file","gradle.html.vue"]]),m=JSON.parse('{"path":"/note/gradle.html","title":"gradle 相关","lang":"zh-CN","frontmatter":{"description":"gradle 相关 gradle 常用命令行 using doc see: https://docs.gradle.org/current/userguide/command_line_interface.html#example_excluding_tasks 执行脚本","head":[["meta",{"property":"og:url","content":"https://wswenyue.vip/note/gradle.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"gradle 相关"}],["meta",{"property":"og:description","content":"gradle 相关 gradle 常用命令行 using doc see: https://docs.gradle.org/current/userguide/command_line_interface.html#example_excluding_tasks 执行脚本"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T13:08:40.000Z"}],["meta",{"property":"article:author","content":"Mr.WenYue"}],["meta",{"property":"article:modified_time","content":"2024-03-31T13:08:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gradle 相关\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-31T13:08:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.WenYue\\",\\"url\\":\\"https://github.com/wswenyue/\\"}]}"]]},"headers":[{"level":2,"title":"gradle 常用命令行","slug":"gradle-常用命令行","link":"#gradle-常用命令行","children":[]},{"level":2,"title":"执行脚本","slug":"执行脚本","link":"#执行脚本","children":[]}],"git":{"createdTime":1711890520000,"updatedTime":1711890520000,"contributors":[{"name":"wswenyue","email":"wswenyue@163.com","commits":1}]},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"note/gradle.md","localizedDate":"2024年3月31日","excerpt":"\\n<h2>gradle 常用命令行</h2>\\n<blockquote>\\n<p>using doc see:\\nhttps://docs.gradle.org/current/userguide/command_line_interface.html#example_excluding_tasks</p>\\n</blockquote>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># 查看项目依赖</span>\\n$ gradle <span class=\\"token parameter variable\\">-q</span> bangjob:dependencies <span class=\\"token operator\\">|</span><span class=\\"token function\\">tee</span> ~/Desktop/dep.txt\\n\\n<span class=\\"token comment\\"># 列出task</span>\\n$ gradle <span class=\\"token parameter variable\\">-q</span> tasks\\n<span class=\\"token comment\\"># 列出所有task</span>\\n$ gradle <span class=\\"token parameter variable\\">-q</span> tasks <span class=\\"token parameter variable\\">--all</span>\\n<span class=\\"token comment\\"># 假执行build Task，他的所有Task执行都会被跳过。即可以使用该命令列出build执行的所有task。 </span>\\n$ gradle build --dry-run\\n\\n<span class=\\"token comment\\"># 执行 dist task 排除test task</span>\\n$ gradle dist --exclude-task <span class=\\"token builtin class-name\\">test</span>\\n\\n<span class=\\"token comment\\"># 不管 up-to-date checks，强制执行所有task</span>\\n$ gradle <span class=\\"token builtin class-name\\">test</span> --rerun-tasks\\n\\n<span class=\\"token comment\\"># 执行build和强制刷新下载依赖</span>\\n$ gradle build --refresh-dependencies\\n\\n<span class=\\"token comment\\"># 列出所有的项目，子项目</span>\\n$ gradle projects\\n\\n<span class=\\"token comment\\"># 查看build Task的帮助，可以输出该Task的详细信息</span>\\n$ gradle <span class=\\"token parameter variable\\">-q</span> <span class=\\"token builtin class-name\\">help</span> <span class=\\"token parameter variable\\">--task</span> build\\n\\n<span class=\\"token comment\\"># 打印对应项目所有的属性值</span>\\n$ gradle <span class=\\"token parameter variable\\">-q</span> bangjob:properties\\n\\n<span class=\\"token comment\\"># 执行clean assembleDebug Task 并设置代理</span>\\n$ gradle clean assembleDebug <span class=\\"token parameter variable\\">-Dhttp.proxyHost</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">127.0</span>.0.1 <span class=\\"token parameter variable\\">-Dhttp.proxyPort</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1087</span> <span class=\\"token parameter variable\\">-Dhttps.proxyHost</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">127.0</span>.0.1 <span class=\\"token parameter variable\\">-Dhttps.proxyPort</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1087</span> <span class=\\"token parameter variable\\">--info</span>\\n\\n</code></pre></div>","autoDesc":true}');export{u as comp,m as data};
