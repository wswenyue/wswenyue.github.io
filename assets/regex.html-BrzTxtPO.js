import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as e}from"./app-BWFs2kdN.js";const o={},a=e(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h1><p><strong>转变你的思维一切当做字符处理</strong></p><p>正则：具有一定规则的表达式，用于验证、匹配字符串。</p><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符"><span>元字符</span></a></h3><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td><code>.</code></td><td><strong>匹配除换行符以外的任意字符</strong></td></tr><tr><td><code>\\d</code></td><td><strong>任意数字</strong></td></tr><tr><td><code>\\D</code></td><td><strong>非数字 [^0-9]</strong></td></tr><tr><td><code>\\w</code></td><td><strong>字母 数字 _</strong></td></tr><tr><td><code>\\W</code></td><td><strong>[^a-zA-Z0-9_]</strong></td></tr><tr><td><code>\\s</code></td><td><strong>任意空白字符</strong></td></tr><tr><td><code>\\S</code></td><td><strong>匹配任意不是空白符的字符(例子：</strong> <code>\\S+</code> <strong>匹配不包含空白符的字符串)</strong></td></tr><tr><td><code>\\b</code></td><td><strong>边界</strong></td></tr><tr><td><code>\\</code></td><td><strong>转义字符</strong></td></tr><tr><td><code>^</code></td><td><strong>匹配字符串的开始(一行的开头)</strong></td></tr><tr><td><code>[^x]</code></td><td><strong>匹配除了x以外的任意字符(例子：</strong> <code>&lt;a[^&gt;]+&gt;</code> <strong>匹配用 尖括号括起来的以a开头的字符串。)</strong></td></tr><tr><td><code>^aeiou]</code></td><td><strong>匹配除了aeiou这几个字母以外的任意字符</strong></td></tr><tr><td><code>$</code></td><td><strong>匹配字符串的结束(匹配必须出现在字符串的末尾或出现在行或字符串末尾的 \\n 之前.)</strong></td></tr></tbody></table><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td><code>？</code></td><td><strong>出现0次或者1次</strong></td></tr><tr><td><code>*</code></td><td><strong>出现0次或者多次</strong></td></tr><tr><td><code>+</code></td><td><strong>出现1次或者多次</strong>相当于 <code>{1,}</code></td></tr><tr><td><code>{m}</code></td><td><strong>出现m次</strong></td></tr><tr><td><code>{m,}</code></td><td><strong>至少出现m次</strong></td></tr><tr><td><code>{m,n}</code></td><td><strong>出现m~n次</strong></td></tr></tbody></table><p><code>(x|y)</code> <strong>: x或y</strong><code>[]</code> <strong>： 任意一个字符</strong></p><pre><code>[abc]:a b c 中的任意一个字符
[a-z]：任意一个小写字母
[A-Z]：任意一个大写字母
[a-zA-Z]：任意一个字母
[a-d[m-p]]:abcdmnop，取并集
[0-9]:任意一个数字
</code></pre><p><strong>中文：</strong> <code>[\\u4e00-\\u9fa5]</code></p><h3 id="分支条件" tabindex="-1"><a class="header-anchor" href="#分支条件"><span>分支条件</span></a></h3><p>如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。 当然<strong>分支的顺序也很重要</strong>： 例如： <code>\\d{5}-\\d{4}|\\d{5}</code>这个表达式用于匹配美国的邮政编码。美国邮编 的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。 如果你把它改成<code>\\d{5}|\\d{5}-\\d{4}</code>的话，那么就只会匹配5位的邮编(以及9位邮 编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h3 id="分组概念" tabindex="-1"><a class="header-anchor" href="#分组概念"><span>分组概念</span></a></h3><p><strong>分组</strong> <code>()</code><code>(.)</code> 第一组：第一组内容的含义为：任意字符</p><p><strong>引用</strong> <code>\\num</code><code>\\num</code> : 引用组(num代表组号) 组的编号从1开始(注：分组0对应整个正则表达式) <code>$1</code> : <strong>上一个正则表达式中第一组的内容</strong> 例如：<code>\\1</code> <strong>:引用第一组的内容</strong></p><p>例如(用来匹配重复出现的单词)： <code>\\b(\\w+)\\b\\s+\\1\\b</code> 可以用来匹配重复的单词，像<code>go</code> <code>go</code>, 或者<code>kitty</code> <code>kitty</code>。这个表达式首先是一个单词， 也就是单词开始处和结束处之间的多于一个的字母或数字<code>(\\b(\\w+)\\b)</code>， 这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符<code>(\\s+)</code>，最后是分组1中捕获的内容（也就是前面匹配的那个单词）<code>(\\1)</code>。</p><p>例如：</p><pre><code>String s2 = &quot;asffasdfd^^^^dasd@@@@fe%%%seadflj000klajsdf&quot;;
//按照重复的字符串进行切割
String[] arr = s2.split(&quot;(.)\\\\1+&quot;);

String s4 = &quot;aaabbbbbbddddddeeeeeeee####%%%CCCC&quot;;
//去掉重复的abde#%C
System.out.println(s4.replaceAll(&quot;(.)\\\\1+&quot;,&quot;$1&quot;));//$1:上一个正则表达式中第一组的内容
</code></pre><h3 id="零宽断言" tabindex="-1"><a class="header-anchor" href="#零宽断言"><span>零宽断言</span></a></h3><table><thead><tr><th>语法(exp:表达式)</th><th>说明</th></tr></thead><tbody><tr><td><code>(?=exp)</code></td><td><strong>匹配exp前面的位置</strong></td></tr><tr><td><code>(?&lt;=exp)</code></td><td><strong>匹配exp后面的位置</strong></td></tr><tr><td><code>(?!exp)</code></td><td><strong>匹配后面跟的不是exp的位置</strong></td></tr><tr><td><code>(?&lt;!exp)</code></td><td><strong>匹配前面不是exp的位置</strong></td></tr></tbody></table><p><code>(?=exp)</code>也叫零宽度正预测先行断言， 它断言自身出现的位置的后面能匹配表达式 <code>exp</code>。 比如 <code>\\b\\w+(?=ing\\b)</code>， 匹配以 <code>ing</code> 结尾的单词的前面部分(除了 <code>ing</code> 以外的部分)，如查找 <code>I&#39;m singing while you&#39;re dancing.</code> 时，它会匹配 <code>sing</code> 和 <code>danc</code>。</p><p><code>(?&lt;=exp)</code>也叫零宽度正回顾后 发断言，它断言自身出现的位置的前面能匹配表达式exp。 比如 <code>(?&lt;=\\bre)\\w+\\b</code> 会匹配以 <code>re</code> 开头的单词的后半部分(除了 <code>re</code> 以外的部分)， 例如在查找<code>reading a book</code>时，它匹配<code>ading</code>。</p><p>假如你想要<strong>给一个很长的数字中每三位间加一个逗号</strong>(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分： <code>((?&lt;=\\d)\\d{3})+\\b</code> ，用它对<code>1234567890</code>进行查找时结果是<code>234567890</code>。</p><p>下面这个例子同时使用了这两种断言： <code>(?&lt;=\\s)\\d+(?=\\s)</code> <strong>匹配以空白符间隔的数字(再次强调，不包括这些空白符)</strong>。</p><p>###负向零宽断言</p><p>前面我们提到过怎么查找<strong>不是某个字符或不在某个字符类里</strong>的字符的方法(反义)。但是如果我们只是想要<strong>确保某个字符没有出现，但并不想去匹配它</strong>时怎么办？例如，如果我们想查找这样的单词<code>--</code>它里面出现了字母<code>q</code>,但是<code>q</code>后面跟的不是字母<code>u</code>, 我们可以尝试这样：</p><p><code>\\b\\w*q[^u]\\w*\\b</code> 匹配包含后 面不是字母<code>u</code>的字母<code>q</code>的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果<code>q</code>出现在单词的结尾的话，像<code>Iraq</code>,<code>Benq</code>，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的<code>[^u]</code>将 会匹配<code>q</code>后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的<code>\\w*\\b</code>将会匹配下一 个单词，于是<code>\\b\\w*q[^u]\\w*\\b</code>就能匹配整个<code>Iraq fighting</code>。<strong>负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符</strong>。现在，我们可以这样来解决这个问题：<code>\\b\\w*q(?!u)\\w*\\b</code>。</p><p><strong>零宽度负预测先行断言</strong><code>(?!exp)</code>，断言此位置的后面不能匹配表达式<code>exp</code>。 例如： <code>\\d{3}(?!\\d)</code> 匹配三位数字，而且这三位数字的后面不能是数字； <code>\\b((?!abc)\\w)+\\b</code> 匹配不包含连续字符串<code>abc</code>的单词。</p><p>同理，我们可以用<code>(?&lt;!exp)</code>,零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：<code>(?&lt;![a-z])\\d{7}</code> <strong>匹配前面不是小写字母的七位数字</strong>。</p><p>一个更复杂的例子： <code>(?&lt;=&lt;(\\w+)&gt;).*(?=&lt;\\/\\1&gt;)</code><strong>匹 配不包含属性的简单HTML标签内里的内容</strong>。 <code>(&lt;?(\\w+)&gt;)</code>指定了这样的前缀：被尖括号括起来的单词(比 如可能是<code>&lt;b&gt;</code>)，然后是<code>.*</code>(任意的字符串),最后是一个后缀<code>(?=&lt;\\/\\1&gt;)</code>。注意后缀里的<code>\\/</code>，它用到了前面提过的字符转义；<code>\\1</code>则是一个反向引用，引用的正是捕获的第一组，前面的<code>(\\w+)</code>匹配的内容，这样如果前缀实际上是<code>&lt;b&gt;</code>的话，后缀就是<code>&lt;/b&gt;</code>了。整个表达式匹配的是<code>&lt;b&gt;</code>和<code>&lt;/b&gt;</code>之间的内容(再次提醒，不包括前缀和后缀本身)。</p><h3 id="贪婪与懒惰" tabindex="-1"><a class="header-anchor" href="#贪婪与懒惰"><span>贪婪与懒惰</span></a></h3><p><strong>贪婪匹配</strong></p><p>在使用修饰匹配次数的特殊符号时，有几种表示方法可以使同一个表达式能够匹配不同的次数，比如：&quot;<code>{m,n}</code>&quot;, &quot;<code>{m,}</code>&quot;, &quot;<code>?</code>&quot;, &quot;<code>*</code>&quot;, &quot;<code>+</code>&quot;，具体匹配的次数随被匹配的字符串而定。<strong>这种重复匹配不定次数的表达式在匹配过程中，总是尽可能多的匹配</strong>。</p><p>比如，针对文本 &quot;<code>dxxxdxxxd</code>&quot;，举例如下：</p><table><thead><tr><th>表达式</th><th>匹配结果</th></tr></thead><tbody><tr><td><code>(d)(\\w+)</code></td><td>&quot;<code>\\w+</code>&quot; 将匹配第一个 &quot;<code>d</code>&quot; 之后的所有字符 &quot;<code>xxxdxxxd</code>&quot;</td></tr><tr><td><code>(d)(\\w+)(d)</code></td><td>&quot;<code>\\w+</code>&quot; 将匹配第一个 &quot;<code>d</code>&quot; 和最后一个 &quot;<code>d</code>&quot; 之间的所有字符 &quot;<code>xxxdxxx</code>&quot;。虽然 &quot;<code>\\w+</code>&quot; 也能够匹配上最后一个 &quot;<code>d</code>&quot;，但是为了使整个表达式匹配成功，&quot;<code>\\w+</code>&quot; 可以 &quot;让出&quot; 它本来能够匹配的最后一个 &quot;<code>d</code>&quot;</td></tr></tbody></table><p>由此可见，&quot;<code>\\w+</code>&quot; 在匹配的时候，总是尽可能多的匹配符合它规则的字符。虽然第二个举例中，它没有匹配最后一个 &quot;<code>d</code>&quot;，但那也是为了让整个表达式能够匹配成功。同理，带 &quot;<code>*</code>&quot; 和 &quot;<code>{m,n}</code>&quot; 的表达式都是尽可能地多匹配，带 &quot;<code>?</code>&quot; 的表达式在可匹配可不匹配的时候，也是尽可能的 &quot;要匹配&quot;。这 种匹配原则就叫作 &quot;贪婪&quot; 模式 。</p><p><strong>懒惰匹配</strong> 在修饰匹配次数的特殊符号后再加上一个 &quot;<code>?</code>&quot; 号，则可以使匹配次数不定的表达式尽可能少的匹配，使可匹配可不匹配的表达式，尽可能的 &quot;不匹配&quot;。这种匹配原则叫作 &quot;懒惰&quot; 模式，也叫作 &quot;勉强&quot; 模式。如果少匹配就会导致整个表达式匹配失败的时候，与贪婪模式类似，懒惰模式会最小限度的再匹配一些，以使整个表达式匹配成功。 举例如下，针对文本 &quot;<code>dxxxdxxxd</code>&quot; 举例：</p><table><thead><tr><th>表达式</th><th>匹配结果</th></tr></thead><tbody><tr><td><code>(d)(\\w+?)</code></td><td>&quot;<code>\\w+?</code>&quot; 将尽可能少的匹配第一个 &quot;<code>d</code>&quot; 之后的字符，结果是：&quot;<code>\\w+?</code>&quot; 只匹配了一个 &quot;<code>x</code>&quot;</td></tr><tr><td><code>(d)(\\w+?)(d)</code></td><td>为了让整个表达式匹配成功，&quot;<code>\\w+?</code>&quot; 不得不匹配 &quot;<code>xxx</code>&quot; 才可以让后边的 &quot;<code>d</code>&quot; 匹配，从而使整个表达式匹配成功。因此，结果是：&quot;<code>\\w+?</code>&quot; 匹配 &quot;<code>xxx</code>&quot;</td></tr></tbody></table><p><strong>懒惰限定符</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>*?</code></td><td>重复任意次，但尽可能少重复</td></tr><tr><td><code>+?</code></td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td><code>??</code></td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td><code>{n,m}?</code></td><td>重复n到m次，但尽可能少重复</td></tr><tr><td><code>{n,}?</code></td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><hr><h3 id="java-jdk提供的正则类" tabindex="-1"><a class="header-anchor" href="#java-jdk提供的正则类"><span>JAVA jdk提供的正则类：</span></a></h3><p><strong>Pattern类</strong></p><pre><code>Pattern p = Pattern.compile(&quot;\\\\d&quot;);
Matcher m = p.matcher(&quot;ass923asdf&quot;);
boolean b = m.matches();
</code></pre><p><strong>String类： matches（）</strong></p><pre><code>String reg = &quot;\\\\d&quot;;
String str = &quot;123&quot;;
str.matches(reg);

str.replaceAll(reg,&quot;&quot;)
str.split(reg)
</code></pre><p>##正则示例：</p><p><strong>邮编</strong>：六位数字</p><pre><code>[0-9]{6} 
或 
\\d{6}
或
[1-9]\\d{5}(?!\\d)	 //这一个是用的最多的版本
</code></pre><p><strong>手机号码</strong>：1开头，第二位3 4 5 7 8 9 ，其余任意</p><pre><code>1[345789]\\d{9}
</code></pre><p><strong>邮箱</strong>：用户名是字母 数字 _ . -组成， @ xxx . xxx</p><pre><code>(\\w|\\.|-)+@\\w+\\.\\w+  [a-zA-Z0-9_.-]+@\\w+\\.\\w+
或
\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*
</code></pre><p><strong>身份证号</strong>：18位数字 或者17位数字+xX</p><pre><code>[1-9]\\d{16}(\\d|[xX])
</code></pre><p><strong>ip地址</strong>：0-255.0-255.0-255.0-255</p><pre><code>(\\d|([1-9]\\d)|(1[0-9][0-9])|(2[0-4]\\d)|(25[0-5]))\\.
或
((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)
</code></pre><p><strong>用户名</strong>：字母 _ 数字 - 组成，6-18位</p><pre><code>(\\w|-){6,18}
</code></pre><p><strong>匹配帐号是否合法</strong>(字母开头，允许5-16字节，允许字母数字下划线)：</p><pre><code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$
</code></pre><p><strong>qq号</strong>：10000以上</p><pre><code>[1-9][0-9]{4,}
</code></pre><p><strong>出生日期</strong> XXXX-XX-XX XX-x-X XXXX-X-X XX-XX-XX</p><pre><code>1900-2015      01-12   01-31
((19)?\\d{2}|(20)?(0\\d|1[0-5]))-
(0?[1-9]|1[0-2])-
(0?[1-9]|[12]\\d|3[01])
</code></pre><p>匹配<strong>双字节字符</strong>(包括汉字在内) 可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p><pre><code>[^\\x00-\\xff]
</code></pre><p>匹配<strong>空白行</strong>（可以用来删除空白行）：</p><pre><code>\\n\\s*\\r
或
\\n[\\s| ]*\\r
</code></pre><p><strong>匹配HTML标记</strong>（这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力）</p><pre><code>&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;
或
/&lt;(.*)&gt;.*&lt;\\/\\1&gt;|&lt;(.*) \\/&gt;/ 
</code></pre><p><strong>匹配首尾空白字符</strong> 可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)</p><pre><code>^\\s*|\\s*$
或
(^\\s*)|(\\s*$)
</code></pre><p><strong>匹配网址URL</strong> 这个基本可以满足需求</p><pre><code>[a-zA-z]+://[^\\s]*
</code></pre><p><strong>匹配国内电话号码</strong>： 匹配形式如 0511-4405222 或 021-87888822</p><pre><code>\\d{3}-\\d{8}|\\d{4}-\\d{7}
</code></pre><p>匹配特定数字：</p><pre><code>^[1-9]\\d*$　 　 //匹配正整数
^-[1-9]\\d*$ 　 //匹配负整数
^-?[1-9]\\d*$　　 //匹配整数
^[1-9]\\d*|0$　 //匹配非负整数（正整数 + 0）
^-[1-9]\\d*|0$　　 //匹配非正整数（负整数 + 0）
^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$　　 //匹配正浮点数
^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$　 //匹配负浮点数
^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$　 //匹配浮点数
^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）
^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$　　//匹配非正浮点数（负浮点数 + 0）
</code></pre><p>匹配特定字符串：</p><pre><code>^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串
^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串
^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串
^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串
^\\w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串
</code></pre><p><strong>常用正则表达式</strong></p><blockquote><p>说明：正则表达式通常用于两种任务：1.验证，2.搜索/替换。用于验证时，通常需要在前后分别加上<code>^</code>和<code>$</code>，以匹配整个待验证字符串；搜索/替换时是否加上此限定则根据搜索的要求而定，此外，也有可能要在前后加上\\b而不是^和$。此表所列的常用正则表达式，除个别外均未在前后加上任何限定，请根据需要，自行处理。</p></blockquote><table><thead><tr><th>说明</th><th>表达式</th></tr></thead><tbody><tr><td>网址（URL）</td><td><code>[a-zA-z]+://[^\\s]*</code></td></tr><tr><td>电子邮件(Email)</td><td><code>\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*</code></td></tr><tr><td>QQ号码</td><td><code>[1-9]\\d{4,}</code></td></tr><tr><td>密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</td><td><code>(?=^.{8,}$)(?=.*\\d)(?=.*\\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\\n).*$</code></td></tr><tr><td>汉字(字符)</td><td><code>[\\u4e00-\\u9fa5]</code></td></tr><tr><td>中文及全角标点符号(字符)</td><td><code>[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]</code></td></tr><tr><td>中国大陆手机号码</td><td><code>1\\d{10}</code></td></tr><tr><td>中国大陆邮政编码</td><td><code>[1-9]\\d{5}</code></td></tr><tr><td>中国大陆身份证号(15位或18位)</td><td><code>\\d{15}(\\d\\d[0-9xX])?</code></td></tr><tr><td>非负整数(正整数或零)</td><td><code>\\d+</code></td></tr><tr><td>正整数</td><td><code>[0-9]*[1-9][0-9]*</code></td></tr><tr><td>整数</td><td><code>-?\\d+</code></td></tr><tr><td>小数</td><td><code>(-?\\d+)(\\.\\d+)?</code></td></tr><tr><td>不包含abc的单词</td><td><code>\\b((?!abc)\\w)+\\b</code></td></tr></tbody></table><p><strong>中国大陆固定电话号码</strong> :</p><pre><code>(\\d{4}-|\\d{3}-)?(\\d{8}|\\d{7})
</code></pre><p><strong>IP地址(IP Address)</strong>:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>HTML标记(包含内容或自闭合)</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;(.*)(.*)&gt;.*&lt;\\/\\1&gt;|&lt;(.*) \\/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>日期(年-月-日)</p><pre><code>(\\d{4}|\\d{2})-((1[0-2])|(0?[1-9]))-(([12][0-9])|(3[01])|(0?[1-9]))
</code></pre><p><strong>时间(小时:分钟, 24小时制)</strong></p><pre><code>((1|0?)[0-9]|2[0-3]):([0-5][0-9])
</code></pre><p><strong>匹配代码注释</strong></p><div class="language-regex line-numbers-mode" data-ext="regex" data-title="regex"><pre class="language-regex"><code># 问题：不能区分变量中包含注释的情况，比如String a = &quot; ;sss/<span class="token quantifier number">*</span>test<span class="token quantifier number">*</span>/sss&quot;; /<span class="token quantifier number">*</span>test<span class="token quantifier number">*</span>/也会被识别
<span class="token group punctuation">(</span><span class="token escape">\\/</span><span class="token escape">\\/</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span><span class="token alternation keyword">|</span><span class="token escape">\\/</span><span class="token special-escape escape">\\*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-set class-name">\\S</span><span class="token char-set class-name">\\s</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+?</span><span class="token special-escape escape">\\*</span><span class="token escape">\\/</span><span class="token group punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单引号或双引号字符串</strong></p><div class="language-regex line-numbers-mode" data-ext="regex" data-title="regex"><pre class="language-regex"><code><span class="token group punctuation">(</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>&quot;&#39;<span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token group punctuation">(?:</span><span class="token special-escape escape">\\\\</span><span class="token char-set class-name">.</span><span class="token alternation keyword">|</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token special-escape escape">\\\\</span><span class="token escape">\\n</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">)</span><span class="token quantifier number">*?</span><span class="token backreference keyword">\\1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>eg: 加黑的是识别的部分 var a = &quot;<strong>this id outer&#39;sss&#39;&quot;hhhhh&quot; string</strong>&quot;; String a = &quot; <strong>;sss/<em>sssss</em>/sss</strong>&quot;; fun(&quot;<strong>/*clousure*/this.a</strong>&quot;)</p></blockquote><p><strong>匹配正则表达式</strong></p><div class="language-regex line-numbers-mode" data-ext="regex" data-title="regex"><pre class="language-regex"><code><span class="token escape">\\/</span><span class="token group punctuation">(?!</span><span class="token special-escape escape">\\*</span><span class="token alternation keyword">|</span>span<span class="token group punctuation">)</span><span class="token char-set class-name">.</span><span class="token quantifier number">+</span><span class="token escape">\\/</span><span class="token group punctuation">(?!</span>span<span class="token group punctuation">)</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>gim<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>匹配字符串中的表情标签</strong></p><div class="language-regex line-numbers-mode" data-ext="regex" data-title="regex"><pre class="language-regex"><code># 表情标签：中括号包含的<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>1,5)个汉字

(<span class="token special-escape escape">\\[</span>[<span class="token range"><span class="token escape">\\u4E00</span><span class="token range-punctuation operator">-</span><span class="token escape">\\u9FA5</span></span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">{1,5}?</span><span class="token special-escape escape">\\]</span><span class="token group punctuation">)</span>

# eg:表情测试<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>weixiao<span class="token char-class-punctuation punctuation">]</span></span>【哭】<span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>微笑<span class="token char-class-punctuation punctuation">]</span></span> 
# 	识别结果: <span class="token char-class"><span class="token char-class-punctuation punctuation">[</span>微笑<span class="token char-class-punctuation punctuation">]</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test for C# Code</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;表情测试[weixiao]【哭】[微笑]&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Regex</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">@&quot;(\\[[\\u4E00-\\u9FA5]{1,5}?\\])&quot;</span><span class="token punctuation">,</span> RegexOptions<span class="token punctuation">.</span>IgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Match</span> m <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> matchCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Match&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>matchCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Group</span> g <span class="token operator">=</span> m<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Group&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;=&#39;&quot;</span> <span class="token operator">+</span> g <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CaptureCollection</span> cc <span class="token operator">=</span> g<span class="token punctuation">.</span>Captures<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cc<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Capture</span> c <span class="token operator">=</span> cc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Capture&quot;</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">&quot;=&#39;&quot;</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">&quot;&#39;, Position=&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    m <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">NextMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>Links</span></a></h3>`,105),d=[a];function c(p,r){return n(),s("div",null,d)}const i=t(o,[["render",c],["__file","regex.html.vue"]]),g=JSON.parse('{"path":"/note/regex.html","title":"正则表达式","lang":"zh-CN","frontmatter":{"description":"正则表达式 转变你的思维一切当做字符处理 正则：具有一定规则的表达式，用于验证、匹配字符串。 元字符 (x|y) : x或y [] ： 任意一个字符 中文： [\\\\u4e00-\\\\u9fa5] 分支条件 如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。 当然分支的顺序也很重要： 例如： \\\\d{5}-\\\\d{4}|\\\\d{5}这个表达式...","head":[["meta",{"property":"og:url","content":"https://wswenyue.vip/note/regex.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"正则表达式"}],["meta",{"property":"og:description","content":"正则表达式 转变你的思维一切当做字符处理 正则：具有一定规则的表达式，用于验证、匹配字符串。 元字符 (x|y) : x或y [] ： 任意一个字符 中文： [\\\\u4e00-\\\\u9fa5] 分支条件 如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。 当然分支的顺序也很重要： 例如： \\\\d{5}-\\\\d{4}|\\\\d{5}这个表达式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T13:08:40.000Z"}],["meta",{"property":"article:author","content":"Mr.WenYue"}],["meta",{"property":"article:modified_time","content":"2024-03-31T13:08:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"正则表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-31T13:08:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.WenYue\\",\\"url\\":\\"https://github.com/wswenyue/\\"}]}"]]},"headers":[{"level":3,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":3,"title":"分支条件","slug":"分支条件","link":"#分支条件","children":[]},{"level":3,"title":"分组概念","slug":"分组概念","link":"#分组概念","children":[]},{"level":3,"title":"零宽断言","slug":"零宽断言","link":"#零宽断言","children":[]},{"level":3,"title":"贪婪与懒惰","slug":"贪婪与懒惰","link":"#贪婪与懒惰","children":[]},{"level":3,"title":"JAVA jdk提供的正则类：","slug":"java-jdk提供的正则类","link":"#java-jdk提供的正则类","children":[]},{"level":3,"title":"Links","slug":"links","link":"#links","children":[]}],"git":{"createdTime":1711890520000,"updatedTime":1711890520000,"contributors":[{"name":"wswenyue","email":"wswenyue@163.com","commits":1}]},"readingTime":{"minutes":12.99,"words":3897},"filePathRelative":"note/regex.md","localizedDate":"2024年3月31日","excerpt":"\\n<p><strong>转变你的思维一切当做字符处理</strong></p>\\n<p>正则：具有一定规则的表达式，用于验证、匹配字符串。</p>\\n<h3>元字符</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>字符</th>\\n<th>意义</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>.</code></td>\\n<td><strong>匹配除换行符以外的任意字符</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\d</code></td>\\n<td><strong>任意数字</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\D</code></td>\\n<td><strong>非数字 [^0-9]</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\w</code></td>\\n<td><strong>字母 数字 _</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\W</code></td>\\n<td><strong>[^a-zA-Z0-9_]</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\s</code></td>\\n<td><strong>任意空白字符</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\S</code></td>\\n<td><strong>匹配任意不是空白符的字符(例子：</strong> <code>\\\\S+</code> <strong>匹配不包含空白符的字符串)</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\b</code></td>\\n<td><strong>边界</strong></td>\\n</tr>\\n<tr>\\n<td><code>\\\\</code></td>\\n<td><strong>转义字符</strong></td>\\n</tr>\\n<tr>\\n<td><code>^</code></td>\\n<td><strong>匹配字符串的开始(一行的开头)</strong></td>\\n</tr>\\n<tr>\\n<td><code>[^x]</code></td>\\n<td><strong>匹配除了x以外的任意字符(例子：</strong> <code>&lt;a[^&gt;]+&gt;</code> <strong>匹配用 尖括号括起来的以a开头的字符串。)</strong></td>\\n</tr>\\n<tr>\\n<td><code>^aeiou]</code></td>\\n<td><strong>匹配除了aeiou这几个字母以外的任意字符</strong></td>\\n</tr>\\n<tr>\\n<td><code>$</code></td>\\n<td><strong>匹配字符串的结束(匹配必须出现在字符串的末尾或出现在行或字符串末尾的 \\\\n 之前.)</strong></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{i as comp,g as data};
